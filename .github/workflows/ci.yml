name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Build project
      run: npm run build
    
    - name: Run unit tests
      run: npm test
    
    - name: Run integration tests
      run: |
        node test-context-management.js
        node test-bidirectional-sync.js
        node test-integration.js
    
    - name: Test CLI commands
      run: |
        npm link
        esl --help
        esl validate examples/simple-crm/simple-crm.esl.yaml
        esl diff examples/simple-crm/simple-crm.esl.yaml examples/simple-crm/src || true
    
    - name: Upload coverage to Codecov
      if: matrix.node-version == '18.x'
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  drift-detection:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Link CLI
      run: npm link
    
    - name: Check for specification drift
      run: |
        echo "Checking for drift in example projects..."
        for example in examples/*/; do
          if [ -f "$example"/*.esl.yaml ]; then
            echo "Checking $example"
            esl diff "$example"/*.esl.yaml "$example"/src || true
          fi
        done
    
    - name: Generate drift report
      run: |
        echo "# Drift Detection Report" > drift-report.md
        echo "Generated on $(date)" >> drift-report.md
        echo "" >> drift-report.md
        for example in examples/*/; do
          if [ -f "$example"/*.esl.yaml ]; then
            echo "## $example" >> drift-report.md
            esl diff "$example"/*.esl.yaml "$example"/src --format json >> drift-report.md || true
          fi
        done
    
    - name: Comment PR with drift report
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const driftReport = fs.readFileSync('drift-report.md', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: driftReport
          });

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
    
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  publish:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Publish to npm
      run: |
        # Only publish if version changed
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        PUBLISHED_VERSION=$(npm view esl-framework version || echo "0.0.0")
        if [ "$CURRENT_VERSION" != "$PUBLISHED_VERSION" ]; then
          npm publish
        else
          echo "Version $CURRENT_VERSION already published"
        fi
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      if: success()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: Release v${{ steps.version.outputs.version }}
        draft: false
        prerelease: false